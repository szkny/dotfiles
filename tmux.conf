# # UTF-8を用いるかどうかはロケールから自動検出される(必要のある場合のみ指定)
# setw -g utf8 on
# set -g status-utf8 on

# prefixキーをC-aに変更する
set -g prefix C-a

# C-bのキーバインドを解除する
unbind C-b

# 履歴の長さ
set -g history-limit 100000

# キーストロークのディレイを減らす
set -sg escape-time 1

# ウィンドウのインデックスを1から始める
set -g base-index 1

# ペインのインデックスを1から始める
setw -g pane-base-index 1

# ウィンドウを閉じた際にインデックスを振り直す
set -g renumber-windows on

# 設定ファイルをリロードする
bind r source-file ~/.tmux.conf \; display "Reloaded!"

# C-a*2でtmux内のプログラムにC-aを送る
bind C-a send-prefix

# 新規ウィンドウを作成する
bind c new-window -c "~"
bind n new-window -c "~"

# v でペインを縦に分割する
bind v split-window -h -c "#{pane_current_path}"

# s でペインを横に分割する
bind s split-window -v -c "#{pane_current_path}"

# Vimのキーバインドでペインを移動する
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R
bind -r C-h select-window -t :-
bind -r C-l select-window -t :+

# Vimのキーバインドでペインをリサイズする
bind -r H resize-pane -L 5
bind -r J resize-pane -D 5
bind -r K resize-pane -U 5
bind -r L resize-pane -R 5

# ペインを入れ替える
bind    Up   swap-pane -U
bind    Down swap-pane -D

# ウィンドウを入れ替える
bind -r Left  swap-window -t -1 \; select-window -t :-
bind -r Right swap-window -t +1 \; select-window -t :+

# ペイン間でキー操作をシンクロさせる
bind S setw synchronize-panes \; display "synchronize-panes #{?pane_synchronized,on,off}"

# ポップアップ
bind t popup -xC -yC -w100% -h100% -E -d "#{pane_current_path}" '\
  if [ popup = $(tmux display -p -F "#{session_name}") ]; then \
    tmux detach-client ; \
  else \
    tmux attach -c $(tmux display -p -F "#{pane_current_path}") -t popup || tmux new -c "~" -s popup ; \
  fi \
'
bind g popup -xC -yC -w100% -h100% -E -d "#{pane_current_path}" "lazygit"

# マウス操作を有効にする
setw -g mouse on

# ターミナルカラー
set -g default-terminal "screen-256color"
set -sa terminal-features ",screen-256color:RGB"

# Undercurl
# set -g default-terminal "${TERM}"
set -as terminal-overrides ',*:Smulx=\E[4::%p1%dm'
set -as terminal-overrides ',*:Setulc=\E[58::2::%p1%{65536}%/%d::%p1%{256}%/%{255}%&%d::%p1%{255}%&%d%;m'

# メッセージの設定
set -g message-style "fg=#e3e3f8,bg=default,bold,bright"
set -g message-command-style "fg=#e3e3f8,bg=default,bold,bright"

# ステータスバーの設定
set -g status on
set -g status-position bottom
set -g status-justify centre
set -g status-bg default
set -g status-style bg=default
set -g status-interval 1
set -g visual-activity off
setw -g monitor-activity on

# # ウィンドウが1つの場合はステータスバーを非表示
# if -F '#{==:#{session_windows},1}' 'set -g status off' 'set -g status on'
# set-hook -g window-linked 'if -F "#{==:#{session_windows},1}" "set -g status off" "set -g status on"'
# set-hook -g window-unlinked 'if -F "#{==:#{session_windows},1}" "set -g status off" "set -g status on"'

# ステータスバーに表示する内容
set -g status-left ""
set -g status-right ""
setw -g window-status-current-format "\
#{?#{==:#{session_windows},1},#[fg=#77a0ff] #[bold]#[fg=#e3e3f8]#W,\
#[fg=#77a0ff]#{?client_prefix, #[bold]#I #[fg=#e3e3f8]#W,} \
}"
setw -g window-status-format "\
#{?window_activity_flag,#[fg=#a0a9cb],#[fg=#506080]}\
#{?client_prefix,  #[fg=#a0a9cb]#I #W,} \
"
setw -g window-status-activity-style "bg=default"

# ペインボーダーの設定
set -g pane-border-style "fg=#555555"
set -g pane-active-border-style "fg=#5588dd"
# set -g pane-border-status bottom
# set -g pane-border-format "#[fg=black,bg=blue] #P #(tmux-pane-border "#{pane_current_path}")"

## カレントディレクトリにウインドウ名を修正
set -g automatic-rename on
set -g automatic-rename-format "#{b:pane_current_path}"
# set -g automatic-rename-format "#{=18:#{b:pane_current_path}}"

# コピーモードを設定する
# if "which clip.exe" "bind-key -T copy-mode-vi y     send-keys -X copy-pipe            'iconv -t sjis | clip.exe'"
# if "which clip.exe" "bind-key -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel 'iconv -t sjis | clip.exe'"
if "which clip.exe" "bind-key -T copy-mode-vi y     send-keys -X copy-pipe            'clip.exe'"
if "which clip.exe" "bind-key -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel 'clip.exe'"
if "which termux-clipboard-set" "bind-key -T copy-mode-vi y     send-keys -X copy-pipe            'termux-clipboard-set'"
if "which termux-clipboard-set" "bind-key -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel 'termux-clipboard-set'"

# copy-pipe と競合する場合があるので無効化
set -s set-clipboard off

## viのキーバインドを使用する
setw -g mode-keys vi
bind -T copy-mode-vi v send-keys -X begin-selection
bind -T copy-mode-vi C-v send-keys -X rectangle-toggle
bind p paste-buffer

## マウスドラッグ時にコピーモードを終了させない
# if "which clip.exe" "bind-key -T copy-mode    MouseDragEnd1Pane send-keys -X copy-pipe 'iconv -t sjis | clip.exe'"
# if "which clip.exe" "bind-key -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe 'iconv -t sjis | clip.exe'"
if "which clip.exe" "bind-key -T copy-mode    MouseDragEnd1Pane send-keys -X copy-pipe 'clip.exe'"
if "which clip.exe" "bind-key -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe 'clip.exe'"
if "which termux-clipboard-set" "bind-key -T copy-mode    MouseDragEnd1Pane send-keys -X copy-pipe 'termux-clipboard-set'"
if "which termux-clipboard-set" "bind-key -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe 'termux-clipboard-set'"
## コピーモードのハイライトカラーを変更する
setw -g mode-style "fg=#ffffff,bg=#334f7a"

# Vim/Neovimにカーソルフォーカス情報を渡す
set -g focus-events on

# プラグイン一覧
set -g @plugin "tmux-plugins/tpm"
set -g @plugin "tmux-plugins/tmux-resurrect"
set -g @plugin "tmux-plugins/tmux-continuum"
set -g @plugin "sainnhe/tmux-fzf"

TMUX_FZF_LAUNCH_KEY="C-f"
# セッション保存/復元
set -g @resurrect-dir "~/.tmux/resurrect"
set -g @resurrect-strategy-vim "session"
set -g @resurrect-processes "ssh node python"
set -g @resurrect-save "C-s"
set -g @resurrect-restore "C-r"
set -g @continuum-restore "on"

# tpmの初期化
run "~/.tmux/plugins/tpm/tpm"

