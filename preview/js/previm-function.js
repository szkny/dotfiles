function isShowHeader() {
return 1;
}

function getFileName() {
return "/mnt/c/Users/user/Documents/MarkDown_Memo/issues/消費電力予測モジュールの改善.md";
}

function getFileType() {
return "markdown";
}

function getLastModified() {
return "2018/08/29 (Wed) 13:20:24";
}

function getContent() {
return "# 消費電力予測モジュールの改善\n\n(作成者: 鈴木、作成日: 2018/08/23)  \n\n## 目的\n\n- 需要予測の精度を向上させる\n\n## 概要\n\n- 需要予測精度の向上には**消費予測**と**PV発電量**の予測精度を改善する必要があり、本ドキュメントは消費予測モジュールの**改善アイデア**についてまとめる\n- 各々の需要家の消費予測を行い、最終的に需要家グループの消費予測を行う\n- [predict_consump.py](http://gitlab.yrdc.kyocera.co.jp/platform/vpp_sim/issues/36)の後継としてdr_cap_calculator_ras.pyからの利用を想定しており、一般的なパッケージのみを利用した単体動作するシンプルなモジュールを作成する\n\n#### <u>試したい改善アイデア</u>\n\n下記の機能を実装し、精度を評価  \n(アイデア募集中です)  \n\n- **時系列分析関連**\n    - 需要家の生活リズムを予測する\n        - 休日平日で大きく電力パターンが異なる (**外出**しているか否か)\n        - 需要家によっては休日でも外出することがあるので、**曜日や祝日判定だけでは不十分**\n        - **SVM**を利用して過去の電力パターンから家にいるかどうかを学習し、判定できるようにする\n        - 家にいる場合といない場合の電力パターンの学習モデルを作る\n    - 時系列分析(**box-jenkins法**)を適用する方法\n        - 複数需要家の消費予測は時系列分析が有効\n        - 参考になりそうなサイト\n            - [季節調整済みのARIMAモデルで電力使用状況を推定してみる](http://jbclub.xii.jp/?p=695)\n            - [Pythonによる時系列分析の基礎](https://logics-of-blue.com/python-time-series-analysis/)\n- **気温と消費電力との相関**がどの程度あるか確認し、相関があれば時系列分析による予測精度を改善する要素として気温データを採用\n    - 蓄電池のモード設定や各需要家の生活リズム等による特徴的な電力パターンは気温の変動パターンと大きく異なるため、相関が無さそうに見える\n    - 気温データの補間方法の検討\n        - 1時間粒度の気温データを**補間**して5分粒度(1分粒度)の電力データに合わせる必要がある\n        - 既存モジュールは気温データを暫定的にlinearで補間しているが、実際の気温は滑らかに変動する\n            - 各種**補間**(linear, cubic, pchip)、または**回帰**(最小二乗、リッジ)を採用して精度が改善するかどうか\n\n## 予測精度の評価方法\n\n実績データが存在する１日分の消費電力を予測し、精度評価を行う\n1. 消費電力データの実績値と予測値の**差分**を各時刻で取り、ヒストグラムを作成\n2. ヒストグラムの**平均値**、**MAPE**(or RMSPE)、**正規性**、**歪度**を評価\n\n<br>\n\n**参考論文** :\n[時系列解析による住宅における電力消費量予測モデルについて](http://www.jser.gr.jp/journal/journal_pdf/2016/journal201601_5.pdf)  \n- 論文中の誤差 : 絶対平均誤差率(MAPE)\n    $$MAPE = \\frac{100}{n}\\sum_{k=1}^n{\\left|\\frac{f_i-y_i}{y_i}\\right|}$$\n$ n $ : サンプル数  \n$ f_i $ : 実績値  \n$ y_i $ : 予測値  \n\n(参考: [いろいろな誤差の意味(RMSE, MAE, MSE, RMSPE, MAPE)](https://mathwords.net/rmsemae))\n\n## メソッドI/O\n\n作成するメソッドの金型  \n\n```python\ndef predict_consump(df_cons_learn, df_temp_learn, df_temp, holiday_csv):\n    \"\"\"\n    param: df_cons_learn 消費電力実績\n    param: df_temp_learn 気温予報実績\n    param: df_temp       当日気温予報\n    param: df_holiday    休日判定データ\n    return: df_cons_pred 消費電力予測データ\n    \"\"\"\n    ...\n    return df_cons_pred\n```\n### <u>入出力データの形式</u>\n\n学習データ (*df_cons_learn*, *df_temp_learn*)  \n- indexがタイムスタンプ(JST)で、１列目に消費電力 or 気温予報の実績が入っていれば列名はなんでもOK\n- df_cons_learnは**５分粒度**、df_temp_learnは**１時間粒度**のデータフレーム\n- データの期間は一致していること (**予測精度が最適となる期間を検討する必要性あり**)\n\nparam: **df_cons_learn** (消費電力実績、目的変数)  \n\n| DATA_TIMESTAMP (index)    | VALUE |\n|:--------------------------|------:|\n| 2018-08-01 00:00:00+09:00 | 0     |\n| 2018-08-01 00:05:00+09:00 | 20    |\n| 2018-08-01 00:10:00+09:00 | 10    |\n| ...                       | ...   |\n| 2018-08-19 23:55:00+09:00 | 10    |\n\nparam: **df_temp_learn** (気温予報実績、説明変数)  \n\n| DATA_TIMESTAMP (index)    | VALUE |\n|:--------------------------|------:|\n| 2018-08-01 00:00:00+09:00 | 25    |\n| 2018-08-01 01:00:00+09:00 | 26    |\n| 2018-08-01 02:00:00+09:00 | 27    |\n| ...                       | ...   |\n| 2018-08-19 23:00:00+09:00 | 27    |\n\nparam: **df_temp** (当日気温予報、説明変数)  \n\n| DATA_TIMESTAMP (index)    | VALUE |\n|:--------------------------|------:|\n| 2018-08-20 00:00:00+09:00 | 24    |\n| 2018-08-20 01:00:00+09:00 | 25    |\n| 2018-08-20 02:00:00+09:00 | 26    |\n| ...                       | ...   |\n\nparam: **df_holiday** (休日判定データ)  \n\n| index | ID  | Country | StartDay  | EndDay    | Description              |\n|:------|----:|--------:|----------:|----------:|-------------------------:|\n| 0     | 1   | 81      | 2015/9/21 | 2015/9/21 | Respect for the Aged Day |\n| 1     | 2   | 81      | 2015/9/22 | 2015/9/22 | National holiday         |\n| ...   | ... | ...     | ...       | ...       | ...                      |\n\nreturn: **df_cons_pred** (一日分の消費電力**予測**データ = 返り値)  \n\n| DATA_TIMESTAMP (index)    | VALUE    | intercept | coef     |\n|:--------------------------|---------:|----------:|---------:|\n| 2018-08-20 00:00:00+09:00 | 8.567813 | 1.255009  | 0.300053 |\n| 2018-08-20 00:05:00+09:00 | 5.123456 | 1.441245  | 0.288332 |\n| 2018-08-20 00:10:00+09:00 | 6.234123 | 0.934512  | 0.322111 |\n| ...                       | ...      | ...       | ...      |\n\n**intercept** と **coef** は、 scikitlearn の **linear_model.LinearRegression()** の 傾きと偏回帰係数 \n\n## メソッドのワークフロー (暫定)\n\n```mermaid\ngraph TB\n\n    subgraph 入力データ\n        subgraph 気象データ\n            weather_result[学習用気温予報実績: df_temp]\n            weather_predict[予測用気温予報: df_temp_predict]\n        end\n        subgraph 消費データ\n            consump_data[学習用消費電力実績: df_sm]\n        end\n    end\n\n    weather_result  --> create_each_model\n    consump_data    --> create_each_model\n    weektype[平日休日判定: decision_holiday] --> create_each_model\n    weather_predict --> pred_each\n\n    subgraph 予測アルゴリズム\n        subgraph 学習モデルの生成\n            create_each_model[各時刻の消費電力と気温の関係をモデル化]\n            add_model[学習モデルlinear_modelに追加]\n            create_each_model --> add_model\n        end\n        add_model --> create_model[5分粒度の1日分の学習モデルデータフレームlinear_model]\n        subgraph 予測電力データの作成\n            pred_each[学習モデルを元に各時刻の消費電力を予測]\n            add_list[消費電力予測データフレーム predict_list に追加]\n            pred_each --> add_list\n        end\n        create_model  --> pred_each\n    end\n\n    add_list --> return[一日分の予測電力 predict_list を返す]\n```\n";
}
